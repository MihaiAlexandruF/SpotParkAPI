// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpotParkAPI.Models;

#nullable disable

namespace SpotParkAPI.Migrations
{
    [DbContext(typeof(SpotParkDbContext))]
    [Migration("20250502163339_AddLicensePlateToReservation")]
    partial class AddLicensePlateToReservation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SpotParkAPI.Models.Entities.AvailabilitySchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<string>("AvailabilityType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("weekly")
                        .HasColumnName("availability_type");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("day_of_week");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.Property<int>("ParkingLotId")
                        .HasColumnType("int")
                        .HasColumnName("parking_lot_id");

                    b.HasKey("ScheduleId")
                        .HasName("PK__Availabi__C46A8A6FE68A3B18");

                    b.HasIndex(new[] { "ParkingLotId", "DayOfWeek" }, "idx_availability_schedule");

                    b.ToTable("Availability_Schedule", (string)null);
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.ParkingLot", b =>
                {
                    b.Property<int>("ParkingLotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("parking_lot_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParkingLotId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(10, 8)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(11, 8)")
                        .HasColumnName("longitude");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price_per_hour");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ParkingLotId")
                        .HasName("PK__Parking___7C960F5B597B5EDB");

                    b.HasIndex(new[] { "OwnerId" }, "idx_parking_lots_owner_id");

                    b.ToTable("Parking_Lots", (string)null);
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.ParkingLotImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParkingLotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("ParkingLotId");

                    b.HasIndex("UserId");

                    b.ToTable("ParkingLotImages");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("pending")
                        .HasColumnName("payment_status");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int")
                        .HasColumnName("reservation_id");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__ED1FC9EAFF800CB2");

                    b.HasIndex(new[] { "ReservationId" }, "idx_payments_reservation_id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reservation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("driver_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("end_time");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParkingLotId")
                        .HasColumnType("int")
                        .HasColumnName("parking_lot_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("active")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_cost");

                    b.HasKey("ReservationId")
                        .HasName("PK__Reservat__31384C295A699A72");

                    b.HasIndex(new[] { "DriverId" }, "idx_reservations_driver_id");

                    b.HasIndex(new[] { "ParkingLotId" }, "idx_reservations_parking_lot_id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370F334D2E48");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E6164D8C51D1C")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__Users__F3DBC57232E6832F")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "idx_users_email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "idx_users_username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.UserVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserVehicles", (string)null);
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.WalletTransaction", b =>
                {
                    b.Property<int>("WalletTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("WalletTransactionId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("WalletId");

                    b.ToTable("Wallet_Transactions", (string)null);
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.AvailabilitySchedule", b =>
                {
                    b.HasOne("SpotParkAPI.Models.Entities.ParkingLot", "ParkingLot")
                        .WithMany("AvailabilitySchedules")
                        .HasForeignKey("ParkingLotId")
                        .IsRequired()
                        .HasConstraintName("FK__Availabil__parki__44FF419A");

                    b.Navigation("ParkingLot");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.ParkingLot", b =>
                {
                    b.HasOne("SpotParkAPI.Models.Entities.User", "Owner")
                        .WithMany("ParkingLots")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__Parking_L__owner__3E52440B");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.ParkingLotImage", b =>
                {
                    b.HasOne("SpotParkAPI.Models.Entities.ParkingLot", "ParkingLot")
                        .WithMany("Images")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotParkAPI.Models.Entities.User", "User")
                        .WithMany("ParkingLotImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingLot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.Payment", b =>
                {
                    b.HasOne("SpotParkAPI.Models.Entities.Reservation", "Reservation")
                        .WithMany("Payments")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK__Payments__reserv__52593CB8");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.Reservation", b =>
                {
                    b.HasOne("SpotParkAPI.Models.Entities.User", "Driver")
                        .WithMany("Reservations")
                        .HasForeignKey("DriverId")
                        .IsRequired()
                        .HasConstraintName("FK__Reservati__drive__4AB81AF0");

                    b.HasOne("SpotParkAPI.Models.Entities.ParkingLot", "ParkingLot")
                        .WithMany("Reservations")
                        .HasForeignKey("ParkingLotId")
                        .IsRequired()
                        .HasConstraintName("FK__Reservati__parki__4BAC3F29");

                    b.Navigation("Driver");

                    b.Navigation("ParkingLot");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.UserVehicle", b =>
                {
                    b.HasOne("SpotParkAPI.Models.Entities.User", "User")
                        .WithMany("UserVehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.Wallet", b =>
                {
                    b.HasOne("SpotParkAPI.Models.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("SpotParkAPI.Models.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.WalletTransaction", b =>
                {
                    b.HasOne("SpotParkAPI.Models.Entities.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId");

                    b.HasOne("SpotParkAPI.Models.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.ParkingLot", b =>
                {
                    b.Navigation("AvailabilitySchedules");

                    b.Navigation("Images");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.Reservation", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.User", b =>
                {
                    b.Navigation("ParkingLotImages");

                    b.Navigation("ParkingLots");

                    b.Navigation("Reservations");

                    b.Navigation("UserVehicles");
                });

            modelBuilder.Entity("SpotParkAPI.Models.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
